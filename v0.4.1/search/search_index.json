{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docs for Frigate-Notify","text":"<p>Hi there, you've found the documentation site for 0x2142/frigate-notify. Thanks for your interest in the project!</p> <p>If you get value out of this tool, please let me know by leaving a star:  </p>"},{"location":"#about-the-project","title":"About the Project","text":"<p>Frigate-Notify is a simple app designed to send notifications from Frigate NVR to your favorite platforms. Intended to be used with standalone Frigate installations - Home Assistant not required, MQTT is optional but recommended.</p>"},{"location":"#features","title":"Features","text":"<p>Event Polling</p> <ul> <li>MQTT</li> <li>Direct via Frigate API</li> </ul> <p>Notification Methods</p> <ul> <li>Discord</li> <li>Gotify</li> <li>Mattermost</li> <li>Ntfy</li> <li>Pushover</li> <li>Signal</li> <li>SMTP</li> <li>Telegram</li> <li>Webhook</li> </ul> <p>Other</p> <ul> <li>Aliveness monitor via HTTP GET (for use with tools like HealthChecks or Uptime Kuma)</li> </ul> <p>Tip</p> <p>If you use this code &amp; have any specific feature requests - please feel free to open an issue with the details of what you would like to see added!</p> <p>While this is a hobby project for me, I'll do my best to respond &amp; update the code for anything reasonable.</p> <p>Thanks again for being here! \ud83d\ude0a</p> <p></p> <p></p>"},{"location":"api/","title":"API","text":"<p>Frigate-Notify has a REST API available for managing configuration, notifications, and retrieving app status.</p>"},{"location":"api/#setup","title":"Setup","text":"<p>The API is disabled by default. To enable, set <code>enabled: true</code> under app &gt; api in the app configuration:</p> Config File Snippet<pre><code>app:\n  api:\n    enabled: true\n    port: 8000\n</code></pre> <p>For more details, see the config docs.</p>"},{"location":"api/#usage","title":"Usage","text":"<p>Once the API is enabled, interactive documentation can be found at <code>:8000/docs</code>.</p> <p>API endpoints will be under the following prefix: <code>:8000/api/v1</code>.</p> <p>OpenAPI spec available at <code>:8000/openapi.json</code> or <code>:8000/openapi.yaml</code>.</p>"},{"location":"api/#supported-operations","title":"Supported Operations","text":""},{"location":"api/#config","title":"Config","text":"<ul> <li>(GET / PUT) <code>/api/v1/config</code><ul> <li>Retrieve or set application configuration</li> </ul> </li> </ul>"},{"location":"api/#control","title":"Control","text":"<ul> <li> <p>(GET / POST) <code>/api/v1/notif_state</code></p> <ul> <li>Retrieve or set global notification state</li> <li>Can be used to dynamically silence all notifications from Frigate-Notify</li> </ul> </li> <li> <p>(POST) <code>/api/v1/notif_test</code></p> <ul> <li>Trigger test notification via all configured notification providers</li> <li>Can be used to test alert filters, templates, or alert provider configuration</li> <li>Note: This works by manually querying Frigate for the last received event &amp; sending a notification based on that event<ul> <li>Notifications sent via this method will bypass global filters, but are still processed by alert-level filters</li> </ul> </li> </ul> </li> <li> <p>(POST) <code>/api/v1/reload</code></p> <ul> <li>Trigger reload of configuration &amp; restart of application</li> </ul> </li> </ul>"},{"location":"api/#status","title":"Status","text":"<ul> <li> <p>(GET) <code>/api/v1/status</code></p> <ul> <li>Retrieve application status</li> <li>Includes:<ul> <li>App health status &amp; reachability of Frigate API and MQTT broker (if used)</li> <li>Stats on last Frigate event &amp; last notification sent</li> <li>Stats on alerts sent/failed &amp; errors for each notification provider</li> </ul> </li> </ul> </li> <li> <p>(GET) <code>/api/v1/version</code></p> <ul> <li>Retrieve application version</li> </ul> </li> <li> <p>(GET) <code>/api/v1/healthz</code></p> <ul> <li>Retrieve application health status</li> <li>Returns <code>ok</code> if app is healthy</li> </ul> </li> <li> <p>(GET) <code>/api/v1/readyz</code></p> <ul> <li>Retrieve application ready status</li> <li>Returns <code>ok</code> if app is ready</li> </ul> </li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v041-feb-06-2025","title":"v0.4.1 - Feb 06 2025","text":"<ul> <li>Add support for notifications via Signal</li> <li>Add support for notifications via Mattermost</li> <li>Fix issue with alert-level filters where filters may prevent notifications on reviews with multiple object detections</li> </ul>"},{"location":"changelog/#v040-jan-27-2025","title":"v0.4.0 - Jan 27 2025","text":"<ul> <li>Support for notification based on Alerts &amp; Detections via Frigate Reviews<ul> <li>\u26a0\ufe0f Note: Reviews mode is now the default with this release</li> <li>To continue using <code>events</code> mode, please see the docs</li> </ul> </li> <li>Add initial support for a REST API<ul> <li>Retrieve, edit, or reload configuration</li> <li>Enable/disable notifications &amp; send test notifications</li> <li>App status/healthchecks</li> </ul> </li> <li>Added support for multiple notification endpoints per notification provider<ul> <li>Includes ability to filter which endpoint is used based on event conditions</li> <li>For example: Two SMTP alert endpoints, each with different contacts. One group for high priority detections (person, car) &amp; the other for anything else</li> </ul> </li> <li>Added support for specifying custom Pushover sounds</li> <li>Added support for re-checking event details from Frigate after a delay<ul> <li>Useful if waiting for a 3rd-party app to update <code>sub_label</code></li> </ul> </li> <li>Added support for processing audio events &amp; optionally dropping audio-only events</li> <li>Camera names are now transformed to title case (ex. \"side_door\" becomes \"Side Door\")</li> <li>Fixed issue with retry logic used for webhook notifications</li> </ul>"},{"location":"changelog/#v035-oct-08-2024","title":"v0.3.5 - Oct 08 2024","text":"<ul> <li>Fixed issue where built-in alert templates were not being included in binary releases</li> <li>Fixed issue where a notification may not be sent if previous event update from Frigate did not contain a snapshot</li> <li>Fixed issue where Gotify snapshot was not using <code>public_url</code> if configured</li> <li>Added <code>from</code> &amp; <code>ignoressl</code> config items to <code>smtp</code> notifier</li> <li>Added ability to send <code>webhook</code> notifications via HTTP GET requests</li> <li>Added support for URL parameters with <code>webhook</code> notifications</li> <li>Added option to only generate a single notification per Frigate event</li> <li>Allow use of template variables within alert <code>title</code> config</li> <li>New options to set specific log level &amp; additional <code>trace</code> level logs for troubleshooting</li> <li>Minor enhancements to config file validation</li> </ul>"},{"location":"changelog/#v034-aug-15-2024","title":"v0.3.4 - Aug 15 2024","text":"<ul> <li>Fixed issue where <code>unzoned: drop</code> config would drop all notifications</li> </ul>"},{"location":"changelog/#v033-aug-14-2024","title":"v0.3.3 - Aug 14 2024","text":"<ul> <li>Additional filtering options for alerts:<ul> <li>Sublabels</li> <li>Minimum label score</li> <li>Quiet hours</li> </ul> </li> <li>Ability to modify snapshot when retrieved from Frigate: include bounding box / timestamp or crop snapshot</li> <li>Allow use of template variables within HTTP headers sent to notification providers<ul> <li>Ntfy action button can now be overrriden by defining a custom <code>X-Actions</code> header in the config file</li> <li>Templates can also now include information from environment variables</li> </ul> </li> </ul>"},{"location":"changelog/#v032-jun-13-2024","title":"v0.3.2 - Jun 13 2024","text":"<ul> <li>Allow config to be provided via environment variables (Thanks @ryan-willis!!)</li> </ul>"},{"location":"changelog/#v031-jun-11-2024","title":"v0.3.1 - Jun 11 2024","text":"<ul> <li>Fix misspelling for Ntfy<ul> <li>Currently config will accept either <code>nfty</code> or <code>ntfy</code>, but in a future release <code>nfty</code> will be removed</li> <li>\u26a0\ufe0f Note: If you are using <code>nfty</code>, please update your config to the correct spelling: <code>ntfy</code></li> </ul> </li> <li>Fix issue where Ntfy action button would use local Frigate URL even if <code>public_url</code> was configured</li> <li>Fix camera links for Frigate 0.14.0+</li> <li>Add support for sending HTTP headers with Ntfy notifications</li> <li>Added config file option to drop events that don't have a snapshot image</li> <li>Move \"No snapshot available\" message into notification templates</li> <li>Add support for disabling colored console logging via config options</li> </ul>"},{"location":"changelog/#v030-jun-03-2024","title":"v0.3.0 - Jun 03 2024","text":"<ul> <li>Reworked &amp; reduced logging, added debug option</li> <li>Add ability to define custom notification templates</li> <li>Add support for notifications via webhook</li> <li>Add retry logic to startup check<ul> <li>App will now retry up to 5 times, checking once every 30 seconds</li> <li>Config options now available to modify max attempts &amp; retry interval</li> </ul> </li> <li>Enable concurrent notification processing</li> <li>Fix issue where some event providers would fail if no snapshot was available via Frigate</li> </ul>"},{"location":"changelog/#v028-may-15-2024","title":"v0.2.8 - May 15 2024","text":"<ul> <li>Add support for notifications via Ntfy</li> <li>Add ability to send additional HTTP headers to Frigate</li> <li>Add new <code>public_url</code> config item for Frigate<ul> <li>This will be used in notification links &amp; should be configured if Frigate is accessible via the internet</li> </ul> </li> <li>Add startup check to verify Frigate API is accessible</li> <li>Rework event notifications to be built from templates</li> <li>Fix default interval for querying evens via web API</li> <li>Fix issue where label score is 0% via web API event query</li> </ul>"},{"location":"changelog/#v027-may-06-2024","title":"v0.2.7 - May 06 2024","text":"<ul> <li>Allow changing default MQTT topic prefix via config</li> <li>Added ability to filter notifications based on labels<ul> <li>New option to allow only notifications with specified labels</li> <li>New option to deny notifications based on labels</li> </ul> </li> </ul>"},{"location":"changelog/#v026-apr-01-2024","title":"v0.2.6 - Apr 01 2024","text":"<ul> <li>Fixed issue with setting <code>unzoned: drop</code> under zone config, where alerts wouldn't be sent if event began outside a zone.</li> <li>Fixed issue with correct timezone getting applied on container image</li> <li>Added <code>timeformat</code> option for notifications, which allows custom date/time format</li> <li>Minor updates to logging to ensure all event logs have an event ID attached</li> </ul>"},{"location":"changelog/#v025-mar-29-2024","title":"v0.2.5 - Mar 29 2024","text":"<ul> <li>Added support for alerts via Pushover</li> <li>Reduced container image from ~1Gb to ~11Mb</li> </ul>"},{"location":"changelog/#v024-mar-28-2024","title":"v0.2.4 - Mar 28 2024","text":"<ul> <li>Added support for alerts via Telegram</li> <li>Updated notification message to now include links to the camera &amp; event clip</li> </ul>"},{"location":"changelog/#v023-mar-14-2024","title":"v0.2.3 - Mar 14 2024","text":"<ul> <li>Updated config management</li> <li>Improved config file validation</li> <li>Fixed issue where HTTP requests would fail if only IP &amp; port were specified in config</li> <li>Fixed crash if Frigate has no event info &amp; app couldn't pull snapshots</li> <li>Added ability to filter notifications based on zones<ul> <li>New config option to only allow notifications based on zone</li> <li>New config option to deny notifications based on zone</li> <li>New config option to allow or drop events outside of a designated zone</li> </ul> </li> </ul>"},{"location":"changelog/#v022-nov-29-2023","title":"v0.2.2 - Nov 29 2023","text":"<ul> <li>Fix SMTP issue where code was ignoring <code>tls: false</code> config flag</li> <li>Fix issue where snapshots would only be sent to the first alerting method, if multiple were enabled</li> <li>Update Debian image used for Docker image</li> </ul>"},{"location":"changelog/#v021-sep-20-2023","title":"v0.2.1 - Sep 20 2023","text":"<ul> <li>Added Docker release build for ARM</li> </ul>"},{"location":"changelog/#v020-sep-19-2023","title":"v0.2.0 - Sep 19 2023","text":"<ul> <li>Add support for excluding cameras from alerts</li> <li>Added ability to set custom alert titles</li> <li>Added ability to set custom MQTT client ID</li> <li>Added ability to change MQTT port</li> <li>Migrate Discord alerts to use Embeds</li> <li>Improved SMTP &amp; Gotify alerts to include a warning if a snapshot wasn't saved</li> <li>Add GitHub actions for automated release builds</li> <li>Added version number to startup logging</li> </ul>"},{"location":"changelog/#v011-apr-25-2023","title":"v0.1.1 - Apr 25 2023","text":"<ul> <li>Add support for MQTT authentication</li> </ul>"},{"location":"changelog/#v010-mar-17-2023","title":"v0.1.0 - Mar 17 2023","text":"<ul> <li>Initial release! \ud83c\udf89</li> </ul>"},{"location":"install/","title":"Install / Setup","text":"<p>Configuration can be provided via config file or environment variables, check here for details. A configuration file template can be found here</p>"},{"location":"install/#docker-recommended","title":"Docker (Recommended)","text":"<p>A Docker image is built with every release. Those images can be found here.</p> <p>Each image is assigned a version tag upon release. Using the <code>latest</code> tag is recommended &amp; will ensure you pull down the most recent version of the app. If needed, prior releases can be used by specifying the individual release tag, like <code>v0.3.0</code>. Additionally, there is an image built regularly from the latest development branch, which is tagged as <code>dev</code>. While the <code>dev</code> image may contain the latest fixes &amp; features, it is not recommended for most users and may be unstable.</p> <p>The app can be run as a container with the bundled docker-compose.yml file:</p> <pre><code>version: \"3.0\"\nservices:\n  frigate-notify:\n    image: ghcr.io/0x2142/frigate-notify:latest\n    # Uncomment below if REST API server is enabled\n    # ports:\n    #   - \"8000:8000\"\n    environment:\n      - TZ=Etc/UTC\n    volumes:\n      - /path/to/config.yml:/app/config.yml\n    restart: unless-stopped\n</code></pre> <p>Update <code>volumes</code> in the compose file to the location of the <code>config.yml</code> file. By default the app will check the <code>/app/config</code> directory for this file.</p> <p>The file name &amp; path can also be modified by specifying a path via the <code>FN_CONFIGFILE</code> environment variable:</p> <pre><code>version: \"3.0\"\nservices:\n  frigate-notify:\n    image: ghcr.io/0x2142/frigate-notify:latest\n    environment:\n      FN_CONFIGFILE: /app/config/config.yml\n      TZ: Etc/UTC\n    volumes:\n      - /path/to/config_directory:/app/config\n    restart: unless-stopped\n</code></pre> <p>Optionally, you can run without compose:</p> <pre><code>docker run -v /path/to/config.yml:/app/config.yml ghcr.io/0x2142/frigate-notify:latest\n</code></pre>"},{"location":"install/#local","title":"Local","text":"<p>Binary executables are provided with every release.</p> <p>Download the latest version &amp; run with:</p> <pre><code>./frigate-notify\n</code></pre> <p>By default, the app will look for a config file in the same directory named <code>config.yml</code>.</p> <p>You can manually specify a config file name or location with the <code>-c</code> flag:</p> <pre><code>./frigate-notify -c &lt;new-config-file-location&gt;\n</code></pre>"},{"location":"config/","title":"Config","text":"<p>Configuration is primarily provided to Frigate-Notify via a Config File or environment variables. A sample config file is available to use as a template.</p> <p>Additionally, a few options are available through command line flags and/or environment variables.</p>"},{"location":"config/file/","title":"Config File","text":"<p>The following section details options available via the <code>config.yml</code> file. Config snippets are provided for each section, however it is recommended to start with a blank copy of the full sample config.</p> <p>Config may also be provided via environment variables. Frigate-notify will load environment variables prefixed with <code>FN_</code>. Environment variables follow the same structure as the config file below, with heirarchy separated by an underscore (<code>_</code>). For example, setting the Frigate server address would be <code>FN_FRIGATE_SERVER</code>, or enabling Discord alerts would use <code>FN_ALERTS_DISCORD_ENABLED</code>.</p>"},{"location":"config/file/#app","title":"App","text":"<ul> <li>mode (Optional - Default: <code>events</code>)<ul> <li>Specify whether to notifications are based on Frigate Events or Reviews</li> <li><code>events</code> will notify on every detected object from Frigate</li> <li><code>reviews</code> will only notify on Frigate Alerts (Requires Frigate 0.14+)<ul> <li>When in <code>reviews</code> mode, toggle <code>notify_detections</code> under the <code>alerts</code> config section to also notify on Detections</li> <li>See also Alerts vs Detections</li> </ul> </li> </ul> </li> <li>API<ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to enable Frigate-Notify's REST API server</li> </ul> </li> <li>port (Optional - Default: <code>8000</code>)<ul> <li>Change default port for API server</li> </ul> </li> </ul> </li> </ul> Config File Snippet<pre><code>app:\n  mode: events\n  api:\n    enabled: true\n    port: 8000\n</code></pre>"},{"location":"config/file/#frigate","title":"Frigate","text":""},{"location":"config/file/#server","title":"Server","text":"<ul> <li>server (Required)<ul> <li>IP, hostname, or URL of the Frigate NVR</li> <li>If IP or hostname specified, app will prepend <code>http://</code></li> <li>If Frigate is not behind a reverse proxy, append port number if necessary</li> </ul> </li> <li>ignoressl (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to allow self-signed certificates for <code>server</code></li> </ul> </li> <li>public_url (Optional)<ul> <li>Should be set if Frigate is available via an external, public URL</li> <li>This value is used for the links used in notifications</li> <li>Format should be full URL (example: <code>https://nvr.your.public.domain.tld</code>)</li> </ul> </li> <li>headers (Optional)<ul> <li>Send additional HTTP headers to Frigate</li> <li>Useful for things like authentication</li> <li>Header format: <code>Header: Value</code></li> <li>Example: <code>Authorization: Basic abcd1234</code></li> </ul> </li> <li>startup_check (Optional)<ul> <li>On startup, frigate-notify will attempt to reach the configured Frigate NVR to validate connectivity</li> <li>These options allow customization of the max attempts &amp; retry interval</li> <li>attempts (Optional - Default: <code>5</code>)<ul> <li>Max number of attempts to reach Frigate server</li> </ul> </li> <li>interval (Optional - Default: <code>30</code>)<ul> <li>Interval between retries, in seconds</li> </ul> </li> </ul> </li> </ul> Config File Snippet<pre><code>frigate:\n  server: nvr.your.domain.tld\n  ignoressl: true\n  public_url: https://nvr.your.public.domain.tld\n  headers:\n    - Authorization: Basic abcd1234\n  startup_check:\n    attempts: 5\n    interval: 30\n</code></pre>"},{"location":"config/file/#webapi","title":"WebAPI","text":"<p>Note</p> <p>Only one monitoring method can be configured, either <code>webapi</code> or <code>mqtt</code>. The other must be set to <code>enabled: false</code>.</p> <ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>If set to <code>true</code>, Frigate events are collected by polling the web API</li> </ul> </li> <li>interval (Optional - Default: <code>30</code>)<ul> <li>How frequently to check the Frigate web API for new events, in seconds</li> </ul> </li> </ul> Config File Snippet<pre><code>frigate:\n  webapi:\n    enabled: true\n    interval: 60\n</code></pre>"},{"location":"config/file/#mqtt","title":"MQTT","text":"<p>Note</p> <p>Only one monitoring method can be configured, either <code>webapi</code> or <code>mqtt</code>. The other must be set to <code>enabled: false</code>.</p> <ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>If set to <code>true</code>, Frigate events are collected via an MQTT broker</li> <li>Note: This must be the same MQTT broker that Frigate is sending events to</li> </ul> </li> <li>server (Required)<ul> <li>IP or hostname of the MQTT server</li> <li>If MQTT monitoring is enabled, this field is required</li> </ul> </li> <li>port (Optiona - Default: <code>1883</code>)<ul> <li>MQTT service port</li> </ul> </li> <li>clientid (Optional - Default: <code>frigate-notify</code>)<ul> <li>Client ID of this app used when connecting to MQTT</li> <li>Note: This must be a unique value &amp; cannot be shared with other MQTT clients</li> </ul> </li> <li>username (Optional)<ul> <li>MQTT username</li> <li>If username &amp; password are not set, then authentication is disabled</li> </ul> </li> <li>password (Optional)<ul> <li>MQTT password</li> <li>Required if <code>username</code> is set</li> </ul> </li> <li>topic_prefix (Optional - Default: <code>frigate</code>)<ul> <li>Optionally change MQTT topic prefix</li> <li>This should match the topic prefix used by Frigate</li> </ul> </li> </ul> Config File Snippet<pre><code>frigate:\n  mqtt: \n    enabled: true\n    server: mqtt.your.domain.tld\n    port: 1883\n    clientid: frigate-notify\n    username: mqtt-user\n    password: mqtt-pass\n    topic_prefix: frigate\n</code></pre>"},{"location":"config/file/#cameras","title":"Cameras","text":"<ul> <li>exclude (Optional)<ul> <li>If desired, provide a list of cameras to ignore</li> <li>Any Frigate events on these cameras will not generate alerts</li> <li>If left empty, this is disabled &amp; all cameras will generate alerts</li> </ul> </li> </ul> Config File Snippet<pre><code>frigate:\n  cameras:\n    exclude:\n      - test_cam_01\n      - test_cam_02\n</code></pre>"},{"location":"config/file/#alerts","title":"Alerts","text":"<p>Note</p> <p>Any combination of alerting methods may be enabled, though you'll probably want to enable at least one! \ud83d\ude05</p> <p>All alert providers (Discord, Gotify, etc) also support optional filters &amp; the ability to configure multiple profiles per provider. Please see Alert Profiles &amp; Filters for more information.</p>"},{"location":"config/file/#general","title":"General","text":"<ul> <li>title (Optional - Default: <code>Frigate Alert</code>)<ul> <li>Title of alert messages that are generated (Email subject, etc)</li> <li>Title value can utilize template variables</li> </ul> </li> <li>timeformat (Optional - Default: <code>2006-01-02 15:04:05 -0700 MST</code>)<ul> <li>Optionally set a custom date/time format for notifications</li> <li>This utilizes Golang's reference time for formatting</li> <li>See this guide for help</li> <li>Example below uses RFC1123 format</li> </ul> </li> <li>nosnap (Optional - Default: <code>allow</code>)<ul> <li>Specify what to do with events that have no snapshot image</li> <li>By default, these events will be sent &amp; notification message will say \"No snapshot available\"</li> <li>Set to <code>drop</code> to silently drop these events &amp; not send notifications</li> </ul> </li> <li>snap_bbox (Optional - Default: <code>false</code>)<ul> <li>Includes object bounding box on snapshot when retrieved from Frigate</li> <li>Note: Per Frigate docs, only applied when event is in progress</li> </ul> </li> <li>snap_timestamp (Optional - Default: <code>false</code>)<ul> <li>Includes timestamp on snapshot when retrieved from Frigate</li> <li>Note: Per Frigate docs, only applied when event is in progress</li> </ul> </li> <li>snap_crop (Optional - Default: <code>false</code>)<ul> <li>Crops snapshot when retrieved from Frigate</li> <li>Note: Per Frigate docs, only applied when event is in progress</li> </ul> </li> <li>notify_once (Optional - Default: <code>false</code>)<ul> <li>By default, each Frigate event may generate several notifications as the object changes zones, etc</li> <li>Set this to <code>true</code> to only notify once per event</li> </ul> </li> <li>notify_detections (Optional - Default: <code>false</code>)<ul> <li>Only used when app <code>mode</code> is <code>reviews</code></li> <li>By default, notifications will only be sent on Frigate alerts</li> <li>Set to <code>true</code> to also enable on detections</li> </ul> </li> <li>recheck_delay (Optional - Default: <code>0</code>)<ul> <li>Optionally re-check event details from Frigate before sending notifications</li> <li>Delay period in seconds</li> <li>If set to <code>0</code>, events are sent immediately upon receipt from Frigate</li> <li>This setting can be useful if needing to wait for a 3rd-party app to set sub_labels</li> </ul> </li> <li>audio_only (Optional - Default: <code>allow</code>)<ul> <li>Specify what to do with events that only contain audio detection</li> <li>By default, these events will generate notifications</li> <li>Set to <code>drop</code> to silently drop these events &amp; not send notifications</li> </ul> </li> </ul> Config File Snippet<pre><code>alerts:\n  general:\n    title: Frigate Alert\n    timeformat: Mon, 02 Jan 2006 15:04:05 MST\n    nosnap:\n    snap_bbox:\n    snap_timestamp:\n    snap_crop:\n    notify_once:\n    notify_detections:\n    audio_only:\n</code></pre>"},{"location":"config/file/#quiet-hours","title":"Quiet Hours","text":"<p>Define a quiet period &amp; supress alerts during this time.</p> <ul> <li>start (Optional)<ul> <li>When quiet period begins, in 24-hour format</li> <li>Required if <code>end</code> is configured</li> </ul> </li> <li>end (Optional)<ul> <li>When quiet period ends, in 24-hour format</li> <li>Required if <code>start</code> is configured</li> </ul> </li> </ul> Config File Snippet<pre><code>alerts:\n  quiet:\n    start: 08:00\n    end: 17:00\n</code></pre>"},{"location":"config/file/#zones","title":"Zones","text":"<p>This config section allows control over whether to generate alerts on all zones, or only specific ones. By default, the app will generate notifications on all Frigate events, regardless of whether the event includes zone info.</p> A note about how this works <p>With MQTT, Frigate will send a <code>new</code> event when a detection starts. Subsequent changes, like the detected object transitioning from one zone to another, will trigger <code>update</code> events. These <code>update</code> events will contain a list of current zone(s) that the object is in, as well as a list of all zones that the object has entered during the event.</p> <p>In order to reduce the number of notifications generated, this app will only alert on the first time the detected object enters a zone.</p> <p>For example, let's say you have a camera in your front yard with zones for sidewalk, driveway, and lawn - but only allow notifications for driveway and lawn. During an event someone was detected originally on the sidewalk, then driveway, lawn, and back to driveway. In this case, you should only receive two notifications. Once for the first time the person entered the driveway zone, and a second when they entered the lawn zone. </p> <p>With Web API event query, we only query the event from Frigate one time. So currently, only one alert would be sent depending on the detected zones at the time the web API was queried for new events.</p> <ul> <li>unzoned (Optional - Default: <code>allow</code>)<ul> <li>Controls alerts on events outside a zone</li> <li>By default, events without a zone will generate alerts</li> <li>Set to <code>drop</code> to prevent generating alerts from events without a zone</li> </ul> </li> <li>allow (Optional)<ul> <li>Specify a list of zones to allow notifications</li> <li>All other zones will be ignored</li> <li>If <code>unzoned</code> is set to <code>allow</code>, notifications will still be sent on events without any zone info</li> </ul> </li> <li>block (Optional)<ul> <li>Specify a list of zones to always ignore</li> <li>This takes precedence over the <code>allow</code> list</li> </ul> </li> </ul> Config File Snippet<pre><code>alerts:\n  zones:\n    unzoned: allow\n    allow:\n     - test_zone_01\n    block:\n     - test_zone_02\n</code></pre>"},{"location":"config/file/#labels","title":"Labels","text":"<p>Similar to zones, notifications can be filtered based on labels. By default, the app will generate notifications regardless of any labels received from Frigate. Using this config section, certain labels can be blocked from sending notifications - or an allowlist can be provided to only generate alerts from specified labels.</p> <ul> <li>min_score (Optional - Default: <code>0</code>)<ul> <li>Filter by minimum label score, based on Frigate <code>top_score</code> value</li> <li>Scores are a percent accuracy of object identification (0-100)</li> <li>For example, to filter objects under 80% accuracy, set <code>min_score: 80</code></li> <li>By default, any score above 0 will generate an alert</li> </ul> </li> <li>allow (Optional)<ul> <li>Specify a list of labels to allow notifications</li> <li>If set, all other labels will be ignored</li> <li>If not set, all labels will generate notifications</li> </ul> </li> <li>block (Optional)<ul> <li>Specify a list of labels to always ignore</li> <li>This takes precedence over the <code>allow</code> list</li> </ul> </li> </ul> Config File Snippet<pre><code>alerts:\n  labels:\n    min_score: 80\n    allow:\n     - person\n     - dog\n    block:\n     - bird\n</code></pre>"},{"location":"config/file/#sublabels","title":"Sublabels","text":"<p>Filter by sublabels, just like normal labels.</p> <ul> <li>allow (Optional)<ul> <li>Specify a list of sublabels to allow notifications</li> <li>If set, all other sublabels will be ignored</li> <li>If not set, all sublabels will generate notifications</li> </ul> </li> <li>block (Optional)<ul> <li>Specify a list of sublabels to always ignore</li> <li>This takes precedence over the <code>allow</code> list</li> </ul> </li> </ul> Config File Snippet<pre><code>alerts:\n  sublabels:\n    allow:\n     - ABCD\n     - EFGH\n    block:\n     - XYZ\n</code></pre>"},{"location":"config/file/#discord","title":"Discord","text":"<ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to enable alerting via Discord webhooks</li> </ul> </li> <li>webhook (Required)<ul> <li>Full URL of the desired Discord webhook to send alerts through</li> <li>Required if this alerting method is enabled</li> <li>Check Discord's docs for how to create a webhook</li> </ul> </li> <li>template (Optional)<ul> <li>Optionally specify a custom notification template</li> <li>For more information on template syntax, see Alert Templates</li> </ul> </li> </ul> Config File Snippet<pre><code>alerts:  \n  discord:\n    enabled: false\n    webhook: https://&lt;your-discord-webhook-here&gt;\n    template:\n</code></pre>"},{"location":"config/file/#gotify","title":"Gotify","text":"<ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to enable alerting via Gotify</li> </ul> </li> <li>server (Required)<ul> <li>IP or hostname of the target Gotify server</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>token (Required)<ul> <li>App token associated with this app in Gotify</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>ignoressl (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to allow self-signed certificates</li> </ul> </li> <li>template (Optional)<ul> <li>Optionally specify a custom notification template</li> <li>For more information on template syntax, see Alert Templates</li> </ul> </li> </ul> Config File Snippet<pre><code>alerts:  \n  gotify:\n    enabled: false\n    server: gotify.your.domain.tld\n    token: ABCDEF\n    ignoressl: true\n    template:\n</code></pre>"},{"location":"config/file/#mattermost","title":"Mattermost","text":"<ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to enable alerting via Mattermost webhooks</li> </ul> </li> <li>webhook (Required)<ul> <li>Full URL of the desired Mattermost webhook to send alerts through</li> <li>Required if this alerting method is enabled</li> <li>Check Mattermost's docs for how to create a webhook</li> </ul> </li> <li>channel (Optional)<ul> <li>Override destination channel to post messages, if allowed by Mattermost config</li> </ul> </li> <li>username (Optional)<ul> <li>Override username to post messages as, if allowed by Mattermost config</li> </ul> </li> <li>priority (Optional - Default: <code>standard</code>)<ul> <li>Set message priority</li> <li>Options: <code>standard</code>, <code>important</code>, <code>urgent</code></li> </ul> </li> <li>ignoressl (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to allow self-signed certificates</li> </ul> </li> <li>headers (Optional)<ul> <li>Send additional HTTP headers with Mattermost webhook</li> <li>Header values can utilize template variables</li> <li>Header format: <code>Header: Value</code></li> <li>Example: <code>Authorization: Basic abcd1234</code></li> </ul> </li> <li>template (Optional)<ul> <li>Optionally specify a custom notification template</li> <li>For more information on template syntax, see Alert Templates</li> </ul> </li> </ul> Config File Snippet<pre><code>  mattermost:\n    enabled: false\n    webhook: https://mattermost.your.domain.tld\n    channel: frigate-notifications\n    username: frigate-notify\n    priority: standard\n    ignoressl: true\n    headers:\n    template:\n</code></pre>"},{"location":"config/file/#ntfy","title":"Ntfy","text":"<ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to enable alerting via Ntfy</li> </ul> </li> <li>server (Required)<ul> <li>Full URL of the desired Ntfy server</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>topic (Required)<ul> <li>Destination topic that will receive alert notifications</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>ignoressl (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to allow self-signed certificates</li> </ul> </li> <li>headers (Optional)<ul> <li>Send additional HTTP headers to Ntfy server</li> <li>Header values can utilize template variables</li> <li>Header format: <code>Header: Value</code></li> <li>Example: <code>Authorization: Basic abcd1234</code></li> <li>Note: Notifications via Ntfy are sent with a default action button that links to the event clip. This can be overridden by defining a custom <code>X-Action</code> header here</li> </ul> </li> <li>template (Optional)<ul> <li>Optionally specify a custom notification template</li> <li>For more information on template syntax, see Alert Templates</li> </ul> </li> </ul> Config File Snippet<pre><code>alerts: \n  ntfy:\n    enabled: true\n    server: https://ntfy.your.domain.tld\n    topic: frigate\n    ignoressl: true\n    headers:\n    template:\n</code></pre>"},{"location":"config/file/#pushover","title":"Pushover","text":"<ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to enable alerting via Pushover</li> </ul> </li> <li>token (Required)<ul> <li>Pushover application API token</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>userkey (Required)<ul> <li>Recipient user or group key from Pushover dashboard</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>devices (Optional)<ul> <li>Optionally specify list of devices to send notifications to</li> <li>If left empty, all devices will receive the notification</li> </ul> </li> <li>sound (Optional)<ul> <li>Specify custom sound for notifications from this app</li> <li>For available values, see the Pushover Docs</li> </ul> </li> <li>priority (Optional)<ul> <li>Optionally set message priority</li> <li>Valid priorities are -2, -1, 0, 1, 2</li> </ul> </li> <li>retry (Optional)<ul> <li>Message retry in seconds until message is acknowledged</li> <li>If <code>priority</code> is set to 2, this is required</li> <li>Minimum value is 30 seconds</li> </ul> </li> <li>expire (Optional)<ul> <li>Expiration timer for message retry</li> <li>If <code>priority</code> is set to 2, this is required</li> </ul> </li> <li>ttl (Optional)<ul> <li>Optionally set lifetime of message, in seconds</li> <li>If set, message notifications are deleted from devices after this time</li> </ul> </li> <li>template (Optional)<ul> <li>Optionally specify a custom notification template</li> <li>For more information on template syntax, see Alert Templates</li> </ul> </li> </ul> Config File Snippet<pre><code>  pushover:\n    enabled: true\n    token: aaaaaaaaaaaaaaaaaaaaaa\n    userkey: bbbbbbbbbbbbbbbbbbbbbb\n    devices: device1,device2\n    sound:\n    priority: 0\n    retry:\n    expire:\n    ttl:\n    template:\n</code></pre>"},{"location":"config/file/#signal","title":"Signal","text":"<p>Important</p> <p>Signal notifications rely on an external service to handle communication to Signal: https://github.com/bbernhard/signal-cli-rest-api</p> <p>Please follow the instructions on the signal-cli-rest-api repo for set up &amp; configuration. This service exposes a REST API that Frigate-Notify uses to forward notifications to Signal.</p> <ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to enable alerting via Ntfy</li> </ul> </li> <li>server (Required)<ul> <li>Full URL of the desired signal-cli-rest-api container</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>account (Required)<ul> <li>Signal account used to send notifications</li> <li>This is the full phone number including country code (ex. <code>+12223334444</code>)</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>recipients (Required)<ul> <li>One or more Signal recipients that will receive notifications</li> <li>This is the full phone number including country code (ex. <code>+12223334444</code>)</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>ignoressl (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to allow self-signed certificates</li> </ul> </li> <li>template (Optional)<ul> <li>Optionally specify a custom notification template</li> <li>For more information on template syntax, see Alert Templates</li> </ul> </li> </ul> Config File Snippet<pre><code>alerts:\n  signal:\n    enabled: false\n    server: https://signal-cli-rest-api.your.domain.tld\n    account: +12223334444\n    recipients:\n     - +15556667777\n    ignoressl: true\n    template:\n</code></pre>"},{"location":"config/file/#smtp","title":"SMTP","text":"<ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to enable alerting via SMTP</li> </ul> </li> <li>server (Required)<ul> <li>IP or hostname of the target SMTP server</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>port (Required)<ul> <li>Port of the target SMTP server</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>tls (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> if SMTP TLS is required</li> </ul> </li> <li>user (Optional)<ul> <li>Add SMTP username for authentication</li> <li>If username &amp; password are not set, then authentication is disabled</li> </ul> </li> <li>password (Optional)<ul> <li>Password of SMTP user</li> <li>Required if <code>user</code> is set</li> </ul> </li> <li>from (Optional)<ul> <li>Set sender address for outgoing messages</li> <li>If left blank but authentication is configured, then <code>user</code> will be used</li> </ul> </li> <li>recipient (Required)<ul> <li>Comma-separated list of email recipients</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>template (Optional)<ul> <li>Optionally specify a custom notification template</li> <li>For more information on template syntax, see Alert Templates</li> </ul> </li> <li>ignoressl (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to allow self-signed certificates</li> </ul> </li> </ul> Config File Snippet<pre><code>alerts:  \n  smtp:\n    enabled: false\n    server: smtp.your.domain.tld\n    port: 587\n    tls: true\n    from: test_user@your.domain.tld\n    user: test_user@your.domain.tld\n    password: test_pass\n    recipient: nvr_group@your.domain.tld, someone_else@your.domain.tld\n    template:\n    ignoressl:\n</code></pre>"},{"location":"config/file/#telegram","title":"Telegram","text":"<p>Note</p> <p>There is an issue with Telegram alerts if you use URL-embedded credentials for your Frigate links, for example: <code>https://user:pass@frigate.domain.tld</code></p> <p>Telegram appears to incorrectly process these URLs, which will cause the camera &amp; clip links  to become unclickable within Telegram.</p> <p>In order to use Telegram for alerts, a bot token &amp; chat ID are required.</p> <p>To obtain a bot token, follow this doc to message @BotFather.</p> <p>Once you have a bot token, make sure to initiate a chat message with your bot. Then visit the following URL:</p> <ul> <li><code>https://api.telegram.org/bot&lt;BOT_TOKEN&gt;/getUpdates</code></li> <li>Replace <code>&lt;BOT_TOKEN&gt;</code> with the API token provided by @BotFather.</li> </ul> <p>Within the response, locate your message to the bot, then grab the ID under <code>message &gt; chat &gt; id</code>. An example response is shown below, where <code>999999999</code> is the ID we need to save:</p> <pre><code>{\n  \"update_id\": 1234567,\n  \"message\": {\n    \"chat\": {\n      \"id\": 999999999,\n      \"first_name\": \"Test User\",\n      \"username\": \"test-username1234\",\n      \"type\": \"private\"\n    }\n  }\n}\n</code></pre> <ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to enable alerting via Telegram</li> </ul> </li> <li>chatid (Required)<ul> <li>Chat ID for the alert recipient</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>token (Required)<ul> <li>Bot token generated from @BotFather</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>template (Optional)<ul> <li>Optionally specify a custom notification template</li> <li>For more information on template syntax, see Alert Templates</li> </ul> </li> </ul> Config File Snippet<pre><code>alerts:  \n  telegram:\n    enabled: true\n    chatid: 123456789\n    token: 987654321:ABCDEFGHIJKLMNOP\n    template:\n</code></pre>"},{"location":"config/file/#webhook","title":"Webhook","text":"<p>Note</p> <p>Webhook alerts are JSON only, and do not contain an image from the event.</p> Default webhook message<pre><code>{\n    \"time\": \"\",\n    \"id\": \"\",\n    \"camera\": \"\",\n    \"label\": \"\", \n    \"score\": \"\",\n    \"current_zones\": \"\",\n    \"entered_zones\": \"\",\n    \"has_clip\": \"\",\n    \"has_snapshot\": \"\",\n    \"links\": {\n         \"camera\": \"\",\n         \"clip\": \"\",\n         \"snapshot\": \"\",\n    },\n}\n</code></pre> <ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to enable alerting via webhook</li> </ul> </li> <li>server (Required)<ul> <li>Full URL of the desired webhook server</li> <li>Required if this alerting method is enabled</li> </ul> </li> <li>ignoressl (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to allow self-signed certificates</li> </ul> </li> <li>method (Optional - Default: <code>POST</code>)<ul> <li>Set HTTP method for webhook notifications</li> <li>Supports <code>GET</code> and <code>POST</code></li> </ul> </li> <li>params (Optional)<ul> <li>Set optional HTTP params that will be appended to URL</li> <li>Params can utilize template variables</li> <li>Format: <code>param: value</code></li> <li>Example: <code>token: abcd1234</code></li> </ul> </li> <li>headers (Optional)<ul> <li>Send additional HTTP headers to webhook receiver</li> <li>Header values can utilize template variables</li> <li>Header format: <code>Header: Value</code></li> <li>Example: <code>Authorization: Basic abcd1234</code></li> </ul> </li> <li>template (Optional)<ul> <li>Optionally specify a custom notification template</li> <li>Only applies when <code>method</code> is <code>POST</code></li> <li>For more information on template syntax, see Alert Templates</li> <li>Note: Webhook templates must be valid JSON</li> </ul> </li> </ul> Config File Snippet<pre><code>  webhook:\n    enabled: false\n    server: \n    ignoressl:\n    method:\n    params:\n    headers:\n    template:\n</code></pre>"},{"location":"config/file/#monitor","title":"Monitor","text":"<p>If enabled, this application will check in with tools like HealthChecks or Uptime Kuma on a regular interval for health / status monitoring.</p> <ul> <li>enabled (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to enable health checks</li> </ul> </li> <li>url (Required)<ul> <li>URL path for health check service</li> <li>Required if monitoring is enabled</li> </ul> </li> <li>interval (Required - Default: <code>60</code>)<ul> <li>Frequency of check-in events</li> <li>Required if monitoring is enabled</li> </ul> </li> <li>ignoressl (Optional - Default: <code>false</code>)<ul> <li>Set to <code>true</code> to allow self-signed certificates</li> </ul> </li> </ul> Config File Snippet<pre><code>monitor:\n  enabled: false\n  url: \n  interval: \n  ignoressl: \n</code></pre>"},{"location":"config/options/","title":"Config Options","text":"<p>The following options are available as command line flags or environment variables:</p> Flag Environment Variable Description -c FN_CONFIGFILE Specify alternate config file location -debug FN_DEBUG Set to <code>true</code> to enable debug logging (Overrides -loglevel) -loglevel FN_LOGLEVEL Specify desired log level: <code>panic</code>, <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code> (Default: <code>info</code>) -jsonlog FN_JSONLOG Set to <code>true</code> to enable logging in JSON -nocolor FN_NOCOLOR Set to <code>true</code> to disable color for console logging"},{"location":"config/profilesandfilters/","title":"Alert Profiles &amp; Filters","text":"<p>While the config examples &amp; guides mostly demonstrate creating a single alert profile per provider, it is possible to define multiple. For example, you could create multiple Discord profiles - each sending notifications to a different Discord channel based on configured filters.</p>"},{"location":"config/profilesandfilters/#alert-profiles","title":"Alert Profiles","text":"<p>In order to configure multiple profiles for an alert provider, we just create a YAML list with each item being an instance of the alert provider config.</p> <p>For example, if we configured a single profile each for Discord &amp; Ntfy - we may have a configuration that looks like the following:</p> Config File Snippet<pre><code>alerts:  \n  discord:\n    enabled: true\n    webhook: https://discord.com/api/webhooks/&lt;webhook-one&gt;\n  ntfy:\n    enabled: true\n    server: https://ntfy.your.domain.tld\n    topic: frigate\n    ignoressl: true\n</code></pre> <p>Now if we wanted to create multiple profiles for Discord, our configuration would look like the following:</p> Config File Snippet<pre><code>alerts:  \n  discord:\n    - enabled: true\n      webhook: https://discord.com/api/webhooks/&lt;webhook-one&gt;\n    - enabled: true\n      webhook: https://discord.com/api/webhooks/&lt;webhook-two&gt;\n  ntfy:\n    enabled: true\n    server: https://ntfy.your.domain.tld\n    topic: frigate\n    ignoressl: true\n</code></pre> <p>When an alert is sent via frigate-notify, each profile is processed in the order of configuration. So the Discord profile with <code>&lt;webhook-one&gt;</code> would be processed first, then the profile with <code>&lt;webhook-two&gt;</code>.</p> <p>In addition, each profile is assigned an internal <code>id</code> by frigate-notify, which you may see in the logs &amp; API. These IDs are assigned in incremental order of configuration, starting at <code>0</code>. In the example above, Discord profile <code>&lt;webhook-one&gt;</code> would be ID <code>0</code>, and <code>&lt;webhook-two&gt;</code> would be ID <code>1</code>.</p>"},{"location":"config/profilesandfilters/#alert-filters","title":"Alert Filters","text":"<p>All alert profiles can also used based on conditional filters. This can be helpful if you have multiple profiles for a single notification provider, or if you're using multiple different providers and want to control which notifications are sent to each.</p> <p>When configuring filters for an alert provider, you are specifying the criteria to match for a notification to be sent via this provider. You may configure any or all of the available filters - however please note that if multiple filter criteria are applied, then the event must match at least one item in all filters to be sent.</p> <p>For example, if we configure Ntfy to only send alerts on zone <code>driveway</code>, then only events with that zone will be sent via Ntfy. If we also configured that same profile to filter on labels <code>person</code> and <code>car</code>, then an event would need to match both the <code>driveway</code> zone AND one of the two labels (<code>person</code> OR `car) to be sent.</p> <p>Info</p> <p>Global event filters are processed before alert-level filters.</p> <p>For example, if a configuration is set to block zone <code>driveway</code>, but an alert-level filter is configured to send notifications on zone <code>driveway</code> - then the event would be dropped by the global setting.</p> <p>The following filters are currently available for alerts:</p> <ul> <li>zones - List of one or more zones</li> <li>labels - List of one or more labels</li> <li>sublabels - List of one or more sublabels</li> <li>cameras - List of one or more cameras</li> <li>quiet - Start/Stop times for quiet hours (see here for more information on how to configure this)</li> </ul> <p>Example below uses Ntfy to demonstrate configuring filters - but this works with any alert provider:</p> Config File Snippet<pre><code>alerts: \n  ntfy:\n    enabled: true\n    server: https://ntfy.your.domain.tld\n    topic: frigate\n    filters:\n        zones:\n          - driveway\n        labels:\n          - car\n          - person\n        sublabels:\n        cameras:\n          - camera_one\n          - camera_two\n          - camera_three\n        quiet:\n          start: 09:00\n          end: 18:00\n</code></pre>"},{"location":"config/templates/","title":"Templates","text":"<p>Frigate-Notify allows for certain configuration values to be customized using Golang text templates. Templates are currently supported on alert titles, alert messages, and HTTP headers.</p>"},{"location":"config/templates/#alert-templates","title":"Alert Templates","text":"<p>Custom message templates can be defined by configuring the <code>template</code> section of any notification provider.</p> <p>By default, Frigate-Notify includes a few templates that it uses for building notification messages: HTML, Plaintext, Markdown, and JSON. All of these are the same message contents, but formatted differently for different notification providers. As you define your own custom templates, it may be helpful to reference these.</p> <p>Note</p> <p>Each notification provider has it's own supported/unsupported formats, so be sure to check before defining a custom template.</p> <p>If you run into trouble with building a custom template, try enabling debug logging. Once an event is received, this will log a message with the final rendered template.</p> <p>Custom messages can be created by utilizing variables to fill in details about the event. Any variable can be inserted by using the syntax: <code>{{ .VariableName }}</code>. For example, the name of the camera could be inserted by using: <code>{{ .Camera }}</code>.</p> <p>When defining a custom template, it can be configured in a single line:</p> <pre><code>alerts:\n  discord:\n    enabled: true\n    webhook: # Webhook URL\n    template: \"Looks like {{ .Camera }} spotted a {{ .Label }}!!\"\n</code></pre> <p>Or it could also be configured as multi-line:</p> <pre><code>alerts:\n  discord:\n    enabled: true\n    webhook: # Webhook URL\n    template: |\n        {{ .Camera }} spotted something!\n        The camera seems to think it found a {{ .Label }} \ud83e\udd14\n</code></pre> <p>If the <code>template</code> configuration is missing or blank under any notification provider, then the default template will be used.</p> <p>Warning</p> <p>If your template starts with a variable - It's recommended to wrap your single-line template in quotes (<code>\"\"</code>), or use the multi-line method. Otherwise, you may get an error loading the config file.</p> <p>So instead of <code>template: {{ .Camera }} alert!</code>, use <code>template: \"{{ .Camera }} alert!\"</code></p>"},{"location":"config/templates/#title-template","title":"Title Template","text":"<p>Template variables can also be used to set the alert title or subject line.</p> <p>As an example, the following <code>title</code> template includes the camera &amp; label information. If the camera <code>front_door</code> detected a <code>dog</code>, then the notification title would be set to: <code>Frigate - front_door detected dog</code></p> Config File Snippet<pre><code>...\nalerts:  \n  general:\n    title: Frigate - {{ .Camera }} detected {{ .Label }}\n...\n</code></pre>"},{"location":"config/templates/#header-templates","title":"Header Templates","text":"<p>For alert methods that support sending custom HTTP headers, these headers can also be defined using variables using the same syntax as above. This can allow for some interesting custom behaviors. In addition, headers can load data from environment variables for populating sensitive information like Authorization headers.</p> <p>As an example, below is an example of altering Ntfy notifications based on the event characteristics:</p> Config File Snippet<pre><code>...\n    headers:\n      - Authorization: Basic {{ env.Getenv \"FN_NTFY_AUTH_BASIC\" }}\n      - X-Priority: \"{{ if ge (len .Zones ) 1 }} 4{{ else }} 3{{ end }}\"\n      - X-Tags: \"{{ if ge (len .Zones ) 1 }} rotating_light, {{ end }}walking\"\n...\n</code></pre> <p>The above headers include an Authorization token which is collected from environment variables. They also modify the Ntfy notification priority &amp; tags depending on whether the detected object is within a zone or not.</p> <p>Let's take a look at how this looks using the sample notification screenshots below. Before the person enters a zone, a Ntfy notification is sent with the default priority (3) &amp; a walking person emoji. However, once that person enters into a zone, the notification is changed to a high priority (4) and includes a <code>rotating_light</code> emoji to draw attention to the alert.</p> Before object enters zone After object enters zone"},{"location":"config/templates/#available-variables","title":"Available Variables","text":"<p>The list below doesn't contain every possible variable, just a few of the most common. Most come from the event payload received from Frigate, but a few extras have been added to help make building templates easier.</p> <p>Info</p> <p>If you're already familiar with Golang templates, check out event.go. Events received from Frigate are parsed into the <code>Event</code> struct, so any of those fields can be used within notifications. Please note that the struct is a combined list of possible fields from both web API &amp; MQTT payloads, which are slightly different. So there may be a few that are only available if you're using the web API event retrieval method, for example.</p> Variable Name Description .Camera Name of camera .HasClip Reports <code>true</code> if clip is available .HasSnapshot Reports <code>true</code> if snapshot is available .ID Frigate event ID .Label Label of detected object .StartTime Unix timestamp of event start .EndTime Unix timestamp of event end .Extra.FormattedTime Converted &amp; formatted timestamp of event start  (Uses <code>alerts &gt; general &gt; timeformat</code> config setting if specified) .Extra.CameraName Title case transform of camera name (ex. \"side_door\" becomes \"Side Door\") .Extra.TopScorePercent Percent confidence of object detection label .Extra.ZoneList List of current zones object is in .Extra.LocalURL Frigate server URL as specified under <code>frigate &gt; server</code> .Extra.PublicURL Frigate Public URL as specified under <code>frigate &gt; public_url</code> .Extra.EventLink Link directly to an event clip .Extra.ReviewLink Link directly to a review item, if MQTT <code>mode</code> is <code>reviews</code>"},{"location":"config/templates/#environment-variables","title":"Environment variables","text":"<p>Templates can also retrieve values from environment variables using a built-in <code>env</code> function. Environment variables used within templates must contain the <code>FN_</code> prefix.</p> <p>For example, storing an authentication token within an env variable:</p> <pre><code>...\n  headers:\n    - Authorization: Basic {{ env \"FN_AUTH_BASIC\" }}\n...\n</code></pre>"}]}